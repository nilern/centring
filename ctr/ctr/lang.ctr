;;; At this point statements will return an empty record with a type of #f.

(ns ctr.lang)

(defn apply-cc
  (#(k) #t
   (ctr.intr/apply-cc k)))

(defn type
  (#(v) #t (ctr.intr/type v)))

(defn =
  (#(a b) #t
   (ctr.intr/identical? a b)))

(defn :
  (#(v T) #t
   (ctr.intr/identical? (ctr.intr/type v) T)))

(defn apply
  (#(f a) (or (: f Fn) (: f Cont))
   (ctr.intr/apply f a))
  ((and #(T fields) args) (: T Type)
   (ctr.intr/apply new (ctr.intr/rcat (ctr.intr/rec Tuple T) fields))))

;; TODO: generics, hash-consing
(def Type (ctr.intr/rec #f 'ctr.lang/Type))
(ctr.intr/set-type! Type Type)
(defn new
  ((and #(T name) args) (= T Type)
   (ctr.intr/shrec args)))
(defn .name
  (#(T) (: T Type)
   (ctr.intr/rref T 0)))

(defrecord (Tuple (... vals)))

;; TODO: use `defbytes` or something like that for this:
(def String (new Type 'ctr.lang/String))

;;; After this point statements return #() like they should.

;;;; Types for builtins

(def Int (new Type 'ctr.lang/Int))
(def Float (new Type 'ctr.lang/Float))
(def Char (new Type 'ctr.lang/Char))
(def Bool (new Type 'ctr.lang/Bool))
(def Fn (new Type 'ctr.lang/Fn))
(def NativeFn (new Type 'ctr.lang/NativeFn))
(def Cont (new Type 'ctr.lang/Cont))
