;;; FIXME: missing typechecks

(##sf#meta (##intr#include bootstrap-rt.ctr))

(##sf#def def
  (##sf#meta
    (##intr#rec
      Macro
      (##sf#fn def expr
        ((##intr#band (: (##intr#stx-expr expr) List.Pair)
                      (##intr#ieq? (length (##intr#stx-expr expr)) 3)
                      ; (##intr#type (##intr#stx-expr (nth 1 (##intr#stx-expr expr)))
                      ;              Symbol)
                                   )
         (##intr#stx
           (prepend (##sf#syntax ##sf#def) (rest (##intr#stx-expr expr)))
           expr))))))

; (defsyntax defsyntax
;   (syntax-fn
;     ((_ name xform) #t
;      #`(def ,name (##sf#meta (##intr#rec Macro ,xform))))))
(def defsyntax
  (##sf#meta
    (##intr#rec
      Macro
      (##sf#fn defsyntax expr
        ((##intr#band (: (##intr#stx-expr expr) List.Pair)
                      (##intr#ieq? (length (##intr#stx-expr expr)) 3))
         (##sf#do
           (def args (rest (##intr#stx-expr expr)))
           (def name (##intr#car args))
           (def xform (##intr#car (rest args)))
           (##intr#stx
             (list (##sf#syntax def) name
               (##intr#stx
                 (list (##sf#syntax ##sf#meta)
                   (##intr#stx
                     (list (##sf#syntax ##intr#rec) (##sf#syntax Macro) xform)
                     expr))
                 expr))
             expr)))))))

; (defsyntax do
;   (syntax-fn
;     ((_ (... stmts)) #t
;      #`(##sf#do ,@stmts))))
(defsyntax do
  (##sf#fn do expr
    ((##intr#band (: (##intr#stx-expr expr) List.Pair)
                  (##intr#ige? (length (##intr#stx-expr expr)) 1))
     (##intr#stx
       (prepend (##sf#syntax ##sf#do) (rest (##intr#stx-expr expr)))
       expr))))

; (defsyntax syntax
;   (syntax-fn
;     ((_ v) #t
;      #`(##sf#syntax ,v))))
(defsyntax syntax
  (##sf#fn syntax expr
    ((##intr#band (: (##intr#stx-expr expr) List.Pair)
                  (##intr#ieq? (length (##intr#stx-expr expr)) 2))
     (do
       (def v (##intr#car (rest (##intr#stx-expr expr))))
       (##intr#stx (list (##sf#syntax ##sf#syntax) v) expr)))))

; (defsyntax quote
;   (syntax-fn
;     ((_ v) #t
;      #`(##sf#quote ,v))))
(defsyntax quote
  (##sf#fn quote expr
    ((##intr#band (: (##intr#stx-expr expr) List.Pair)
                  (##intr#ieq? (length (##intr#stx-expr expr)) 2))
     (do
       (def v (##intr#car (rest (##intr#stx-expr expr))))
       (##intr#stx (list (syntax ##sf#quote) v) expr)))))

; (defsyntax meta
;   (syntax-fn
;     ((_ (... stmts)) #t
;      #`(##sf#meta (do ,@stmtsv)))))
(defsyntax meta
  (##sf#fn meta expr
    ((##intr#band (: (##intr#stx-expr expr) List.Pair)
                  (##intr#ige? (length (##intr#stx-expr expr)) 1))
     (do
       (def stmts (rest (##intr#stx-expr expr)))
       (##intr#stx
         (list (syntax ##sf#meta)
               (##intr#stx (prepend (syntax do) stmts) expr))
         expr)))))

(meta
  ; (defn analyze-pattern
  ;   (#(path pat) #t
  ;    (analyze-pattern (syntax #t) (quote ()) path pat))
  ;   (#(cond binds path pat) (: (##intr#stx-expr pat) Symbol)
  ;    #(cond (prepend #(pat path) binds))))
  (def analyze-pattern
    (##sf#fn analyze-pattern args
      ((##intr#band (: args Tuple) (##intr#ieq? (##intr#rlen args) 2))
       (analyze-pattern (syntax #t) (quote ())
                        (##intr#rref args 0) (##intr#rref args 1)))
      ((##intr#band (: args Tuple) (##intr#ieq? (##intr#rlen args) 4)
                    (: (##intr#stx-expr (##intr#rref args 3)) Symbol))
       (##intr#rec Tuple
         (##intr#rref args 0)
         (prepend (##intr#rec Tuple (##intr#rref args 3) (##intr#rref args 2))
                  (##intr#rref args 1))))))

  ; (def lower-condition
  ;   (syntax-fn
  ;     (('and (... args)) #t #`(##intr#band ,@(map lower-condition args)))
  ;     (('or (... args)) #t #`(##intr#bior ,@(map lower-condition args)))
  ;     (('not arg) #t #`(##intr#bnot ,@arg))
  ;     (expr #t expr)))
  ; TODO: when symbols are hash-consed, get rid of sym-eq?
  (def lower-condition
    (##sf#fn lower-condition expr
      ((##intr#band (: (##intr#stx-expr expr) List.Pair)
                    (##intr#ige? (length (##intr#stx-expr expr)) 1)
                    (: (##intr#car (##intr#stx-expr expr)) Symbol)
                    (##intr#sym-eq? (##intr#car (##intr#stx-expr expr)) 'and))
       (##intr#stx
         (prepend (syntax ##intr#band)
                  (map lower-condition (rest (##intr#stx-expr expr))))
         expr))
      ((##intr#band (: (##intr#stx-expr expr) List.Pair)
                    (##intr#ige? (length (##intr#stx-expr expr)) 1)
                    (: (##intr#car (##intr#stx-expr expr)) Symbol)
                    (##intr#sym-eq? (##intr#car (##intr#stx-expr expr)) 'or))
       (##intr#stx
         (prepend (syntax ##intr#band)
                  (map lower-condition (rest (##intr#stx-expr expr))))
         expr))
      ((##intr#band (: (##intr#stx-expr expr) List.Pair)
                    (##intr#ieq? (length (##intr#stx-expr expr)) 2)
                    (: (##intr#car (##intr#stx-expr expr)) Symbol)
                    (##intr#sym-eq? (##intr#car (##intr#stx-expr expr)) 'not))
       (##intr#stx
         (prepend (syntax ##intr#band)
                  (map lower-condition (rest (##intr#stx-expr expr))))
         expr))
      (#t expr))))

; (defsyntax fn
;   (syntax-fn
;     ((_ name (... cases))
;      (and (: name Symbol)
;           (every? (syntax-fn (#((_ _ (... _))) #t #t) (_ #t #f)) cases))
;      (def formal (syntax arg))
;      (def expand-case
;        (syntax-fn
;          ((pat cond (... body)) #t
;           (def #(pat-cond pat-binds) (analyze-pattern pat))
;           #`(,(apply lower-condition #`(and ,pat-cond ,cond))
;              (do
;                ,@(map (fn (#(name expr) #t #`(def ,name ,expr)))
;                       (reverse pat-binds))
;                ,@body)))))
;      #`(##sf#fn ,name ,formal ,@(map expand-case cases)))))
(defsyntax fn
  (##sf#fn fn expr
    ((##intr#band
      (: (##intr#stx-expr expr) List.Pair)
      (##intr#ige? (length (##intr#stx-expr expr)) 2)
      (: (##intr#stx-expr (##intr#car (rest (##intr#stx-expr expr)))) Symbol)
      (every? (##sf#fn _ args
              ;; TODO: use overload resolution when it becomes available
              ((##intr#band
                (: args Tuple) (##intr#ieq? (##intr#rlen args) 1)
                (##intr#ige? (length (##intr#stx-expr (##intr#rref args 0))) 2))
               #t)
              ((##intr#band
                (: args Tuple) (##intr#ieq? (##intr#rlen args) 1)
                (##intr#bnot
                  (##intr#ige?
                    (length (##intr#stx-expr (##intr#rref args 0))) 2)))
               #f))
            (rest (rest (##intr#stx-expr expr)))))
     (do
       (def args (rest (##intr#stx-expr expr)))
       (def name (##intr#car args))
       (def cases (rest args))
       (def formal (syntax arg))
       (def expand-case
         (##sf#fn expand-case argv
           ((##intr#band
             (: (##intr#stx-expr (##intr#rref argv 0)) List.Pair)
             (##intr#ige? (length (##intr#stx-expr (##intr#rref argv 0))) 2))
            (do
              (def args (##intr#stx-expr (##intr#rref argv 0)))
              (def pat (##intr#car args))
              (def cond (##intr#car (rest args)))
              (def body (rest (rest args)))
              (def analysis (analyze-pattern formal pat))
              (def pat-cond (##intr#rref analysis 0))
              (def pat-binds (##intr#rref analysis 1))
              (##intr#stx
                (list
                  (apply lower-condition
                    (##intr#stx (list (syntax ##intr#band) pat-cond cond) cond))
                  (##intr#stx
                    (prepend
                      (syntax do)
                      (concat
                        (map (##sf#fn build-def args
                               ((##intr#band
                                 (: args Tuple)
                                 (##intr#ieq? (##intr#rlen args) 1)
                                 (: (##intr#rref args 0) Tuple)
                                 (##intr#ieq?
                                   (##intr#rlen (##intr#rref args 0)) 2))
                                (##intr#stx
                                  (list (syntax def)
                                        (##intr#rref (##intr#rref args 0) 0)
                                        (##intr#rref (##intr#rref args 0) 1))
                                  pat)))
                             (reverse pat-binds))
                        body))
                    (##intr#rref argv 0)))
                (##intr#rref argv 0))))))
       (##intr#stx
         (concat (list (syntax ##sf#fn) name formal)
                 (map expand-case cases))
         expr)))))
