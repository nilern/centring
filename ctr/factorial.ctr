(centring.ct/set-module! (centring.ct/quote centring.core))

(centring.ct/def list
  (centring.ct/fn vs vs))

(centring.ct/def def
  (centring.ct/macro (name val)
    (list (centring.ct/quote centring.ct/def) name val)))

(def macro
  (centring.ct/macro (formals expr)
    (list (centring.ct/quote centring.ct/macro) formals expr)))

(def quote
  (macro (v)
    (list (centring.ct/quote centring.ct/quote) v)))

(def fn
  (macro (formals expr)
    (list (quote centring.ct/fn) formals expr)))

(def if
  (macro (cond then else)
    (list (quote centring.ct/if) cond then else)))

(def module
  (macro (name)
    (list (quote centring.ct/set-module!) (list (quote quote) name))))

;;;;

(module factorial)

(centring.core/def dec
  (centring.core/fn (n) (centring.core/- n 1)))

(centring.core/def fact
  (centring.core/fn (n)
    (centring.core/if (centring.core/< n 1)
      1
      (centring.core/* n (fact (dec n))))))

(centring.core/writeln (fact 5))
